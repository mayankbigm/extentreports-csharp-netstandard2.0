@using AventStack.ExtentReports
@using AventStack.ExtentReports.ViewDefs
@{
	var bdd = false;
	if (Model.TestList.Count > 0)
	{
		bdd = Model.TestList[0].IsBehaviorDrivenType || (Model.TestList[0].HasChildren && Model.TestList[0].NodeContext.FirstOrDefault().IsBehaviorDrivenType);
	}
}
<div id='test-view' class='view'>
	<section id='controls'>
		<div class='controls grey lighten-4'>
			<!-- test toggle -->
			<div class='chip transparent'>
				<a class='dropdown-button tests-toggle' data-activates='tests-toggle' data-constrainwidth='true' data-beloworigin='true' data-hover='true' href='#'>
				<i class='material-icons'>warning</i> Status
				</a>
				<ul id='tests-toggle' class='dropdown-content'>
					@if (Model.ContainsStatus(Status.Pass)) 
					{
					<li status='pass'><a href='#!'>Pass <i class='material-icons green-text'>check_circle</i></a></li>
					}
					@if (Model.ContainsStatus(Status.Fatal)) 
					{
					<li status='fatal'><a href='#!'>Fatal <i class='material-icons red-text text-darken-4 text-darken-3'>cancel</i></a></li>
					}
					@if (Model.ContainsStatus(Status.Fail)) 
					{
					<li status='fail'><a href='#!'>Fail <i class='material-icons red-text'>cancel</i></a></li>
					}
					@if (Model.ContainsStatus(Status.Error)) 
					{
					<li status='error'><a href='#!'>Error <i class='material-icons red-text lighten-2'>error</i></a></li>
					}
					@if (Model.ContainsStatus(Status.Warning)) 
					{
					<li status='warning'><a href='#!'>Warning <i class='material-icons orange-text'>warning</i></a></li>
					}
					@if (Model.ContainsStatus(Status.Skip)) 
					{
					<li status='skip'><a href='#!'>Skip <i class='material-icons cyan-text'>redo</i></a></li>
					}
					<li class='divider'></li>
					<li status='clear' clear='true'><a href='#!'>Clear Filters <i class='material-icons'>clear</i></a></li>
				</ul>
			</div>
			<!-- test toggle -->
			<!-- category toggle -->
			@if (Model.CategoryContext.Context.Count > 0)
			{
			<div class='chip transparent'>
				<a class='dropdown-button category-toggle' data-activates='category-toggle' data-constrainwidth='false' data-beloworigin='true' data-hover='true' href='#'>
				<i class='material-icons'>local_offer</i> Category
				</a>
				<ul id='category-toggle' class='dropdown-content'>
					@foreach (var category in Model.CategoryContext.Context) {
					<li><a href='#'>@category.Name</a></li>
					}
					<li class='divider'></li>
					<li class='clear'><a href='#!' clear='true'>Clear Filters</a></li>
				</ul>
			</div>
			}
			<!-- category toggle -->
			<!-- clear filters -->
			<div class='chip transparent hide'>
				<a class='' id='clear-filters' alt='Clear Filters' title='Clear Filters'>
				<i class='material-icons'>close</i> Clear
				</a>
			</div>
			<!-- clear filters -->
			<!-- enable dashboard -->
			<div id='toggle-test-view-charts' class='chip transparent'>
				@{
				var dashboardEnabledClass = "";
				if (Model.MasterConfig.GetValue("chartVisibleOnOpen") == "true") {
				dashboardEnabledClass = "pink-text";
				}
				}
				<a class='@dashboardEnabledClass' id='enable-dashboard' alt='Enable Dashboard' title='Enable Dashboard'>
				<i class='material-icons'>track_changes</i> Dashboard
				</a>
			</div>
			<!-- enable dashboard -->
			<!-- search -->
			<div class='chip transparent' alt='Search Tests' title='Search Tests'>
				<a href="#" class='search-div'>
				<i class='material-icons'>search</i> Search
				</a>
				<div class='input-field left hide'>
					<input id='search-tests' type='text' class='validate browser-default' placeholder='Search Tests...'>
				</div>
			</div>
			<!-- search -->
		</div>
	</section>
	@Include("V3Charts")
	<div class='subview-left left'>
		<div class='view-summary'>
			<ul id='test-collection' class='test-collection'>
				@foreach (var test in Model.TestList)
				{
				var hasChildrenClass = test.HasChildren ? "has-leaf" : "";
				<li class='test displayed active @hasChildrenClass @test.Status.ToString().ToLower()' status='@test.Status.ToString().ToLower()' bdd='@bdd' test-id='@test.TestId'>
					<div class='test-heading'>
						<span class='test-name'>@test.Name</span>
						<span class='test-time'>@test.StartTime</span>
						<span class='test-status right @test.Status.ToString().ToLower()'>@test.Status</span>
					</div>
					<div class='test-content hide'>
						@if (bdd)
						{
							<div class="sr-filters bdd-filters">
								<a class="btn-floating waves-effect waves-light pass green" title="pass">
								<i class='material-icons'>@MaterialIcon.GetIcon(Status.Pass)</i>
								</a>
								<a class="btn-floating waves-effect waves-light fail red" title="fail">
								<i class='material-icons'>@MaterialIcon.GetIcon(Status.Fail)</i>
								</a>
								<a class="btn-floating waves-effect waves-light skip blue" title="skip">
								<i class='material-icons'>@MaterialIcon.GetIcon(Status.Skip)</i>
								</a>
								<a class="btn-floating waves-effect waves-light clear grey" title="clear">
								<i class='material-icons'>clear</i>
								</a>
							</div>
							if (!string.IsNullOrEmpty(test.Description))
							{
								<div class='test-desc'>@test.Description</div>
							}
							foreach (var node in test.NodeContext.All())
							{
							<div class='@node.BehaviorDrivenTypeName.ToLower() node' test-id='@node.TestId' status='@node.Status.ToString().ToLower()'>
								@if (node.HasCategory)
								{
								<div class='category-list'>
									@foreach (var category in node.CategoryContext.All())
									{
									<span class='category label'>@category.Name</span>
									}
								</div>
								}
								<span class='duration right label'>@node.RunDuration</span>
								<div class="bdd-test">
									<div class="scenario-name">
										<span class='status @node.Status.ToString().ToLower()' title='@node.Status'>
										<i class='material-icons'>@MaterialIcon.GetIcon(node.Status)</i>
										</span> @node.BehaviorDrivenTypeName: @node.Name
									</div>
									@if (node.HasScreenCapture)
									{
									<ul class='screenshots right'>
										@foreach (var sc in node.ScreenCaptureContext.All())
										{
										<li>
											<a data-featherlight="image" href="@sc.Path">
											<i class='material-icons'>panorama</i>
											</a>
										</li>
										}
									</ul>
									}
									@if (!string.IsNullOrEmpty(node.Description))
									{
									@node.Description
									}
								</div>
								@if (node.HasChildren)
								{
								<ul class='steps'>
									@foreach (var child in node.NodeContext.All())
									{
									<li test-id='@child.TestId' class='node @child.BehaviorDrivenTypeName.ToLower() @child.Status.ToString().ToLower()' status='@child.Status'>
										<div class="step-name">
											<span class='status @child.Status.ToString().ToLower()' title='@child.Status'>
											<i class='material-icons'>@MaterialIcon.GetIcon(child.Status)</i>
											</span>@child.Name
										</div>
										@if (child.HasScreenCapture)
										{
										<ul class='screenshots right'>
											@foreach (var sc in child.ScreenCaptureContext.All())
											{
											<li>
												<a data-featherlight="image" href="@sc.Path">
												<i class='material-icons'>panorama</i>
												</a>
											</li>
											}
										</ul>
										}
										@if (!string.IsNullOrEmpty(child.Description))
										{
											@child.Description
										}
										@foreach (var log in child.LogContext.All())
										{
											if (log.HasException)
											{
											<textarea readonly class="code-block">@log.ExceptionInfo.Exception.StackTrace</textarea>
											}
											else
											{
											<div class="node-step">@Raw(log.Details)</div>
											}
											if (log.HasScreenCapture)
											{
											<div class="node-step">@Raw(log.ScreenCaptureContext.FirstOrDefault().Source)</div>
											}
										}
										@if (child.HasChildren)
										{
										<ul class='gc steps'>
											@foreach (var gc in child.NodeContext.All())
											{
											<li test-id='@gc.TestId' class='gc @gc.BehaviorDrivenTypeName.ToLower() @gc.Status' status='@gc.Status'>
												<h6 class="step-name">
													<span class='status @gc.Status' title='@gc.Status'>
													<i class='material-icons'>@MaterialIcon.GetIcon(gc.Status)</i>
													</span>@gc.Name
												</h6>
												@if (gc.HasScreenCapture)
												{
												<ul class='screenshots right'>
													@foreach (var sc in gc.ScreenCaptureContext.All())
													{
													<li>
														<a data-featherlight="image" href="@sc.Path">
														<i class='material-icons'>panorama</i>
														</a>
													</li>
													}
												</ul>
												}
												@if (!string.IsNullOrEmpty(gc.Description))
												{
													@gc.Description
												}
												@foreach (var log in gc.LogContext.All())
												{
													if (log.HasException)
													{
													<textarea readonly class="code-block">@log.ExceptionInfo.Exception.StackTrace</textarea>
													}
													else
													{
													<div class="node-step">@Raw(log.Details)</div>
													}
													if (log.HasScreenCapture)
													{
													<div class="node-step">@Raw(log.ScreenCaptureContext.FirstOrDefault().Source)</div>
													}
												}
											</li>
											}
										</ul>
										}
									</li>
									}
								</ul>
								}
							</div>
							}
						}
						else
						{
						<div class='test-time-info'>
							<span class='label start-time'>@test.StartTime</span>
							<span class='label end-time'>@test.EndTime</span>
							<span class='label time-taken grey lighten-1 white-text'>@test.RunDuration.ToString("''h'h:'m'm:'s's.'fff'ms'")</span>
						</div>
						if (!string.IsNullOrEmpty(test.Description))
						{
						<div class='test-desc'>@test.Description</div>
						}
						if (test.HasAuthor || test.HasCategory || test.HasDevice)
						{
							<div class='test-attributes'>
								@if (test.HasCategory)
								{
								<div class='category-list'>
									@foreach (var c in test.CategoryContext.All()) { <span class='category label'>@c.Name</span> }
								</div>
								}
								@if (test.HasAuthor)
								{
								<div class='author-list'>
									@foreach (var a in test.AuthorContext.All()) { <span class='author label'>@a.Name</span> }
								</div>
								}
								@if (test.HasDevice)
								{
								<div class='device-list'>
									@foreach (var d in test.DeviceContext.All()) { <span class='device label'>@d.Name</span> }
								</div>
								}
							</div>
						}
						if (test.HasLog)
						{
							<div class='test-steps'>
								<table class='bordered table-results'>
									<thead>
										<tr>
											<th>Status</th>
											<th>Timestamp</th>
											<th>Details</th>
										</tr>
									</thead>
									<tbody>
										@foreach (var log in test.LogContext.All())
										{
										<tr class='log' status='@log.Status.ToString().ToLower()'>
											<td class='status @log.Status.ToString().ToLower()' title='@log.Status' alt='@log.Status'>
												<i class='material-icons'>@MaterialIcon.GetIcon(log.Status)</i>
											</td>
											<td class='timestamp'>@log.Timestamp.ToString("HH:mm:ss")</td>
											<td class='step-details'>
												@if (log.HasException)
												{
													<textarea readonly class="code-block">@log.ExceptionInfo.Exception.StackTrace</textarea>
												}
												else
												{
													@Raw(log.Details)
												}
												@if (log.HasScreenCapture)
												{
													@Raw(log.ScreenCaptureContext.FirstOrDefault().Source)
												}
											</td>
										</tr>
										}
									</tbody>
								</table>
							</div>
						}
						if (test.HasChildren)
						{
						<ul class='collapsible node-list' data-collapsible='accordion'>
							@{var leaf = "";}
							@foreach (var node in test.NodeContext.All())
							{
							leaf = (node.HasChildren) ? "" : "leaf";
							<li class='node level-@node.Level @leaf @node.Status.ToString().ToLower()' status='@node.Status.ToString().ToLower()' test-id='@node.TestId'>
								<div class='collapsible-header'>
									<div class='node-name'>@node.Name</div>
									<span class='node-time'>@node.StartTime</span>
									&middot; <span class='node-duration'>@node.RunDuration.ToString("''h'h:'m'm:'s's.'fff'ms'")</span>
									<span class='test-status right @node.Status.ToString().ToLower()'>@node.Status</span>
									@if (node.HasCategory)
									{
									<div class='category-list'>
										@foreach (var category in node.CategoryContext.All()) 
										{
										<span class='category label'>@category.Name</span>
										}
									</div>
									}
								</div>
								@if (node.HasLog)
								{
								<div class='collapsible-body'>
									@if (!string.IsNullOrEmpty(node.Description))
									{
									<div class='node-desc'>@node.Description</div>
									}
									@if (node.HasAuthor)
									{
									<div class='author-list right'>
										@foreach (var author in node.AuthorContext.All())
										{
										<span class='author label white-text'>@author.Name</span>
										}
									</div>
									}
									<div class='node-steps'>
										<table class='bordered table-results'>
											<thead>
												<tr>
													<th>Status</th>
													<th>Timestamp</th>
													<th>Details</th>
												</tr>
											</thead>
											<tbody>
												@foreach (var log in node.LogContext.All())
												{
												<tr class='log' status='@log.Status.ToString().ToLower()'>
													<td class='status @log.Status.ToString().ToLower()' title='@log.Status' alt='@log.Status'>
														<i class='material-icons'>@MaterialIcon.GetIcon(log.Status)</i>
													</td>
													<td class='timestamp'>@log.Timestamp.ToString("HH:mm:ss")</td>
													<td class='step-details'>
														@if (log.HasException)
														{
														<textarea readonly class="code-block">@log.ExceptionInfo.StackTrace</textarea>
														}
														else
														{
														@Raw(log.Details)
														}
														@if (log.HasScreenCapture)
														{
														@Raw(log.ScreenCaptureContext.FirstOrDefault().Source)
														}
													</td>
												</tr>
												}
											</tbody>
										</table>
									</div>
								</div>
								}
								@if (@node.HasScreenCapture)
								{
								<ul class='screenshots'>
									@foreach (var sc in node.ScreenCaptureContext.All())
									{
									<li>@sc.Source</li>
									}
								</ul>
								}
								@if (node.HasChildren)
								{
								<ul class='collapsible node-list' data-collapsible='accordion'>
									@foreach (var child in node.NodeContext.All())
									{
									leaf = (child.HasChildren) ? "" : "leaf";
									<li class='node level-@child.Level @leaf @child.Status.ToString().ToLower()' status='@child.Status.ToString().ToLower()' test-id='@child.TestId'>
										<div class='collapsible-header'>
											<div class='node-name'>@child.Name</div>
											<span class='node-time'>@child.StartTime</span>
											&middot; <span class='node-duration'>@child.RunDuration.ToString("''h'h:'m'm:'s's.'fff'ms'")</span>
											<span class='test-status right @child.Status.ToString().ToLower()'>@child.Status</span>
											@if (child.HasCategory)
											{
											<div class='category-list'>
												@foreach (var category in child.CategoryContext.All()) 
												{
												<span class='category label'>@category.Name</span>
												}
											</div>
											}
										</div>
										@if (child.HasLog)
										{
										<div class='collapsible-body'>
											@if (!string.IsNullOrEmpty(child.Description))
											{
											<div class='node-desc'>@child.Description</div>
											}
											@if (child.HasAuthor)
											{
											<div class='author-list right'>
												@foreach (var author in child.AuthorContext.All())
												{
												<span class='author label white-text'>@author.Name</span>
												}
											</div>
											}
											<div class='node-steps'>
												<table class='bordered table-results'>
													<thead>
														<tr>
															<th>Status</th>
															<th>Timestamp</th>
															<th>Details</th>
														</tr>
													</thead>
													<tbody>
														@foreach (var log in child.LogContext.All())
														{
														<tr class='log' status='@log.Status.ToString().ToLower()'>
															<td class='status @log.Status.ToString().ToLower()' title='@log.Status' alt='@log.Status'>
																<i class='material-icons'>@MaterialIcon.GetIcon(log.Status)</i>
															</td>
															<td class='timestamp'>@log.Timestamp.ToString("HH:mm:ss")</td>
															<td class='step-details'>
																@if (log.HasException)
																{
																<textarea readonly class="code-block">@log.ExceptionInfo.StackTrace</textarea>
																}
																else
																{
																@Raw(log.Details)
																}
																@if (log.HasScreenCapture)
																{
																@Raw(log.ScreenCaptureContext.FirstOrDefault().Source)
																}
															</td>
														</tr>
														}
													</tbody>
												</table>
											</div>
										</div>
										}
										@if (@child.HasScreenCapture)
										{
										<ul class='screenshots'>
											@foreach (var sc in child.ScreenCaptureContext.All())
											{
											<li>@sc.Source</li>
											}
										</ul>
										}
										@if (child.HasChildren)
										{
										<ul class='collapsible node-list' data-collapsible='accordion'>
											@foreach (var grandchild in child.NodeContext.All())
											{
											leaf = (grandchild.HasChildren) ? "" : "leaf";
											<li class='node level-@grandchild.Level @leaf @grandchild.Status.ToString().ToLower()' status='@grandchild.Status.ToString().ToLower()' test-id='@grandchild.TestId'>
												<div class='collapsible-header'>
													<div class='node-name'>@grandchild.Name</div>
													<span class='node-time'>@grandchild.StartTime</span>
													&middot; <span class='node-duration'>@grandchild.RunDuration.ToString("''h'h:'m'm:'s's.'fff'ms'")</span>
													<span class='test-status right @grandchild.Status.ToString().ToLower()'>@grandchild.Status</span>
													@if (grandchild.HasCategory)
													{
													<div class='category-list'>
														@foreach (var category in grandchild.CategoryContext.All()) 
														{
														<span class='category label'>@category.Name</span>
														}
													</div>
													}
												</div>
												@if (grandchild.HasLog)
												{
												<div class='collapsible-body'>
													@if (!string.IsNullOrEmpty(grandchild.Description))
													{
													<div class='node-desc'>@grandchild.Description</div>
													}
													@if (grandchild.HasAuthor)
													{
													<div class='author-list right'>
														@foreach (var author in grandchild.AuthorContext.All())
														{
														<span class='author label white-text'>@author.Name</span>
														}
													</div>
													}
													<div class='node-steps'>
														<table class='bordered table-results'>
															<thead>
																<tr>
																	<th>Status</th>
																	<th>Timestamp</th>
																	<th>Details</th>
																</tr>
															</thead>
															<tbody>
																@foreach (var log in grandchild.LogContext.All())
																{
																<tr class='log' status='@log.Status.ToString().ToLower()'>
																	<td class='status @log.Status.ToString().ToLower()' title='@log.Status' alt='@log.Status'>
																		<i class='material-icons'>@MaterialIcon.GetIcon(log.Status)</i>
																	</td>
																	<td class='timestamp'>@log.Timestamp.ToString("HH:mm:ss")</td>
																	<td class='step-details'>
																		@if (log.HasException)
																		{
																		<textarea readonly class="code-block">@log.ExceptionInfo.StackTrace</textarea>
																		}
																		else
																		{
																		@Raw(log.Details)
																		}
																		@if (log.HasScreenCapture)
																		{
																		@Raw(log.ScreenCaptureContext.FirstOrDefault().Source)
																		}
																	</td>
																</tr>
																}
															</tbody>
														</table>
														@if (@grandchild.HasScreenCapture)
														{
														<ul class='screenshots'>
															@foreach (var sc in grandchild.ScreenCaptureContext.All())
															{
															<li>@sc.Source</li>
															}
														</ul>
														}
													</div>
												</div>
												}
												@if (grandchild.HasChildren)
												{
												<ul class='collapsible node-list' data-collapsible='accordion'>
												
												</ul>
												}
											</li>
											}
										</ul>
										}
									</li>
									}
								</ul>
								}
							</li>
							}
						</ul>
						}
						if (test.HasScreenCapture)
						{
							<ul class='screenshots'>
								@foreach (var sc in test.ScreenCaptureContext.All())
								{
								<li>
									@Raw(sc.Source)
								</li>
								}
							</ul>
						}
						}
					</div>
				</li>
				}
			</ul>
		</div>
	</div>
	<!-- subview left -->
	<div class='subview-right left'>
		<div class='view-summary'>
			@if (!bdd)
			{
			<div id='step-filters' class="right sr-filters">
				<a class="btn-floating waves-effect waves-light green" status="pass" alt="pass" title="pass"><i class="material-icons">check_circle</i></a>
				<a class="btn-floating waves-effect waves-light red" status="fail" alt="fail" title="fail"><i class="material-icons">cancel</i></a>
				<a class="btn-floating waves-effect waves-light red darken-4" status="fatal" alt="fatal" title="fatal"><i class="material-icons">cancel</i></a>
				<a class="btn-floating waves-effect waves-light pink text-lighten-1" status="error" alt="error" title="error"><i class="material-icons">error</i></a>
				<a class="btn-floating waves-effect waves-light orange" alt="warning" status="warning" title="warning"><i class="material-icons">warning</i></a>
				<a class="btn-floating waves-effect waves-light teal" status="skip" alt="skip" title="skip"><i class="material-icons">redo</i></a>
				<a class="btn-floating waves-effect waves-light grey" status="clear" alt="Clear filters" title="Clear filters"><i class="material-icons">clear</i></a>
			</div>
			}
			<h5 class='test-name'></h5>
		</div>
	</div>
	<!-- subview right -->
</div>
<!-- test view -->
