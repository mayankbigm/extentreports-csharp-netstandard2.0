@using AventStack.ExtentReports

@{
  var bdd = Model.TestList[0].IsBehaviorDrivenType;

  var boxSize = "col-md-12";
  if (Model.ReportStatusStats.ChildCount > 0) {
	boxSize = "col-sm-12 col-md-6";
  }
  if (bdd || Model.ReportStatusStats.GrandChildCount > 0) {
	boxSize = "col-sm-12 col-md-4";
  }

  var chartWidth="115";
  var chartHeight="90";
  var chartBoxHeight="94px";

  var parentHeading="Classes";
  var childHeading="Tests";  
  var grandChildHeading="Steps";
  var parentLabel="class(es)";
  var childLabel = "test(s)";
  var grandchildLabel="step(s)";

  if (bdd) {
    parentHeading="Features";
    childHeading="Scenarios";
    grandChildHeading="Steps";
	parentLabel="feature(s)";
	childLabel="scenario(s)";
  } else {
    if (Model.AnalysisStrategy == AnalysisStrategy.Test) {
      parentHeading="Tests";
      childHeading="Steps";
      grandChildHeading="";
	  parentLabel="test(s)";
	  childLabel=grandchildLabel;
    }
  }
  
  var runDuration = DateTime.Now - Model.StartTime;
}

<!DOCTYPE html>
<html>
	@Include("Head")
	<body class="dashboard-view @Model.MasterConfig.GetValue("theme")">
		<div class="app header-dark side-nav-folded">
			<div class="layout">
				@Include("Navbar")
				@Include("Sidenav")
				<div class="page-container">
					<div class="main-content">
						<div class="container-fluid p-4">
							<div class="row">
								<div class="@boxSize">
									<div class="card">
										<div class="card-header">
											<h6 class="card-title">@parentHeading</h6>
										</div>
										<div class="card-body">
	                                        <div class="">
	                                            <canvas id='parent-analysis' width='@chartWidth' height='@chartHeight'></canvas>
	                                        </div>
	                                    </div>
	                                    <div class="card-footer">
	                                    	<div><small data-tooltip='@Model.ReportStatusStats.ParentPercentagePass%'>
	                                    		<b>@Model.ReportStatusStats.ParentCountPass</b> @parentHeading.ToLower() passed
                                    		</small></div>
	                                    	<div>
	                                    		<small data-tooltip='@Model.ReportStatusStats.ParentPercentageFail%'><b>@(Model.ReportStatusStats.ParentCountFail + Model.ReportStatusStats.ParentCountFatal)</b> @parentHeading.ToLower() failed, 
	                                    		<b data-tooltip='@Model.ReportStatusStats.ParentPercentageOthers%'>@(Model.ReportStatusStats.ParentCountError + Model.ReportStatusStats.ParentCountWarning + Model.ReportStatusStats.ParentCountSkip)</b> others
	                                    		</small>
                                    		</div>
	                                    </div>
									</div>
								</div>
								@if (Model.ReportStatusStats.ChildCount > 0)
								{
								<div class="@boxSize">
									<div class="card">
										<div class="card-header">
											<h6 class="card-title">@childHeading</h6>
										</div>
										<div class="card-body">
	                                        <div class="">
	                                            <canvas id='child-analysis' width='@chartWidth' height='@chartHeight'></canvas>
	                                        </div>
	                                    </div>
	                                    <div class="card-footer">
	                                    	<div><small data-tooltip='@Model.ReportStatusStats.ChildPercentagePass%'><b>@Model.ReportStatusStats.ChildCountPass</b> @childHeading.ToLower() passed</small></div>
	                                    	<div>
	                                    		<small data-tooltip='@Model.ReportStatusStats.ChildPercentageFail%'><b>@(Model.ReportStatusStats.ChildCountFail + Model.ReportStatusStats.ChildCountFatal)</b> @childHeading.ToLower() failed, 
	                                    		<b data-tooltip='@Model.ReportStatusStats.ChildPercentageOthers%'>@(Model.ReportStatusStats.ChildCountError + Model.ReportStatusStats.ChildCountWarning + Model.ReportStatusStats.ChildCountSkip + Model.ReportStatusStats.ChildCountInfo)</b> others
	                                    		</small>
                                    		</div>
	                                    </div>
									</div>
								</div>
								}
								@if (Model.ReportStatusStats.GrandChildCount > 0)
								{
								<div class="@boxSize">
									<div class="card">
										<div class="card-header">
											<h6 class="card-title">@grandChildHeading</h6>
										</div>
										<div class="card-body">
	                                        <div class="">
	                                            <canvas id='grandchild-analysis' width='@chartWidth' height='@chartHeight'></canvas>
	                                        </div>
	                                    </div>
	                                    <div class="card-footer">
	                                    	<div><small data-tooltip='@Model.ReportStatusStats.GrandChildPercentagePass%'><b>@Model.ReportStatusStats.GrandChildCountPass</b> @grandChildHeading.ToLower() passed</small></div>
	                                    	<div>
	                                    		<small data-tooltip='@Model.ReportStatusStats.GrandChildPercentageFail%'><b>@(Model.ReportStatusStats.GrandChildCountFail + Model.ReportStatusStats.GrandChildCountFatal)</b> @grandChildHeading.ToLower() failed, 
	                                    		<b data-tooltip='@Model.ReportStatusStats.GrandChildPercentageOthers%'>@(Model.ReportStatusStats.GrandChildCountError + Model.ReportStatusStats.GrandChildCountWarning + Model.ReportStatusStats.GrandChildCountSkip + Model.ReportStatusStats.GrandChildCountInfo)</b> others
	                                    		</small>
                                    		</div>
	                                    </div>
									</div>
								</div>
								}
							</div>
							<div class="row">
								<div class="col-md-3">
									<div class="card">
										<div class="card-body box-height-150">
	                                        <div class="media justify-content-between">
												<div>
													<p class="">@parentHeading</p>
													<h2 class="font-size-28 font-weight-light">@Model.ReportStatusStats.ParentCount</h2>
													<span class="text-semibold text-success font-size-15">
													<i class="ti-arrow-up font-size-11"></i> 
														<span>@Math.Round(Model.ReportStatusStats.ParentPercentagePass, 2)%</span>
													</span>
												</div>
												<div class="align-self-end">
													<i class="fa fa-align-left font-size-70 opacity-01"></i>
												</div>
											</div>
	                                    </div>
									</div>
								</div>
								@if (Model.ReportStatusStats.ChildCount > 0)
								{
								<div class="col-md-3">
									<div class="card">
										<div class="card-body box-height-150">
	                                        <div class="media justify-content-between">
												<div>
													<p class="">@childHeading</p>
													<h2 class="font-size-28 font-weight-light">@Model.ReportStatusStats.ChildCount</h2>
													<span class="text-semibold text-success font-size-15">
													<i class="ti-arrow-up font-size-11"></i> 
														<span>@Math.Round(Model.ReportStatusStats.ChildPercentagePass, 2)%</span>
													</span>
												</div>
												<div class="align-self-end">
													<i class="fa fa-align-left font-size-70 opacity-01"></i>
												</div>
											</div>
	                                    </div>
									</div>
								</div>
								}
								<div class="col-md-3">
									<div class="card">
										<div class="card-body box-height-150">
	                                        <div class="media justify-content-between">
												<div>
													<p class="">Start</p>
													<h6 class="font-weight-light">@Model.StartTime</h6>
													<span class="text-semibold text-success font-size-15">
												</div>
												<div class="align-self-end">
													<i class="fa fa-clock-o font-size-70 text-success opacity-01"></i>
												</div>
											</div>
	                                    </div>
									</div>
								</div>
								<div class="col-md-3">
									<div class="card">
										<div class="card-body box-height-150">
	                                        <div class="media justify-content-between">
												<div>
													<p class="">End</p>
													<h6 class="font-weight-light">@Model.EndTime</h6>
													<span class="text-semibold text-danger font-size-15">
												</div>
												<div class="align-self-end">
													<i class="fa fa-clock-o font-size-70 text-danger opacity-01"></i>
												</div>
											</div>
	                                    </div>
									</div>
								</div>
								@if (Model.ReportStatusStats.ChildCount == 0)
								{
								<div class="col-md-3">
									<div class="card">
										<div class="card-body box-height-150">
	                                        <div class="media justify-content-between">
												<div>
													<p class="">Duration</p>
													<h6 class="font-weight-light">@runDuration</h6>
													<span class="text-semibold font-size-15">
												</div>
												<div class="align-self-end">
													<i class="fa fa-clock-o font-size-70 text-danger opacity-01"></i>
												</div>
											</div>
	                                    </div>
									</div>
								</div>
								}
							</div>
							@if (Model.MasterConfig.GetValue("enableTimeline") == "true")
							{
							<div class="row">
								<div class="col-md-12">
									<div class="card timeline">
										<div class="card-header">
											<h6 class="card-title">Timeline</h6>
										</div>
										<div class="card-body">
	                                        <div class="">
	                                            <canvas id="timeline" height="120"></canvas>
	                                        </div>
	                                    </div>
									</div>
								</div>
							</div>
							}
							<div class="row">
								@if (Model.AuthorContext.Context.Count > 0)
								{
								<div class="col-md-6">
									<div class="card">
										<div class="card-header">
											<h6 class="card-title">Author</h6>
										</div>
										<div class="table-overflow">
											<table class="table table-sm">
												<thead>
													<tr class="bg-gray">
														<th>Name</th>
														<th>Passed</th>
														<th>Failed</th>
														<th>Others</th>
														<th>Passed %</th>
													</tr>
												</thead>
												<tbody>
													@foreach(var context in Model.AuthorContext.Context)
													{
													<tr>
														<td>@context.Name</td>
														<td>@context.Passed</td>
														<td>@context.Failed</td>
														<td>@context.Others</td>
														<td>@(Math.Round(((double)context.Passed/(double)context.Count)*100, 2))%</td>
													</tr>
													}
												</tbody>
											</table>
										</div>
									</div>
								</div>
								}
								@if (Model.CategoryContext.Context.Count > 0)
								{
								<div class="col-md-6">
									<div class="card">
										<div class="card-header">
											<h6 class="card-title">Tags</h6>
										</div>
										<div class="table-overflow">
											<table class="table table-sm">
												<thead>
													<tr class="bg-gray">
														<th>Name</th>
														<th>Passed</th>
														<th>Failed</th>
														<th>Others</th>
														<th>Passed %</th>
													</tr>
												</thead>
												<tbody>
													@foreach(var context in Model.CategoryContext.Context)
													{
													<tr>
														<td>@context.Name</td>
														<td>@context.Passed</td>
														<td>@context.Failed</td>
														<td>@context.Others</td>
														<td>@(Math.Round(((double)context.Passed/(double)context.Count)*100, 2))%</td>
													</tr>
													}
												</tbody>
											</table>
										</div>
									</div>
								</div>
								}
								@if (Model.DeviceContext.Context.Count > 0)
								{
								<div class="col-md-6">
									<div class="card">
										<div class="card-header">
											<h6 class="card-title">Device</h6>
										</div>
										<div class="table-overflow">
											<table class="table table-sm">
												<thead>
													<tr class="bg-gray">
														<th>Name</th>
														<th>Passed</th>
														<th>Failed</th>
														<th>Others</th>
														<th>Passed %</th>
													</tr>
												</thead>
												<tbody>
													@foreach(var context in Model.DeviceContext.Context)
													{
													<tr>
														<td>@context.Name</td>
														<td>@context.Passed</td>
														<td>@context.Failed</td>
														<td>@context.Others</td>
														<td>@(Math.Round(((double)context.Passed/(double)context.Count)*100, 2))%</td>
													</tr>
													}
												</tbody>
											</table>
										</div>
									</div>
								</div>
								}
								@if (Model.SystemAttributeContext.Count > 0)
								{
								<div class="col-md-4">
									<div class="card">
										<div class="card-header">
											<h6 class="card-title">Environment</h6>
										</div>
										<div class="table-overflow">
											<table class="table table-sm">
												<thead>
													<tr class="bg-gray">
														<th>Name</th>
														<th>Value</th>
													</tr>
												</thead>
												<tbody>
													@foreach (var attr in Model.SystemAttributeContext.SystemAttributeCollection)
													{
														<tr>
															<td>@attr.Name</td>
															<td>@attr.Value</td>
														</tr>
													}
												</tbody>
											</table>
										</div>
									</div>
								</div>
								}
							</div>
						</div>
					</div>
				</div>
			</div>
		</div>
		<script>
			var statusGroup = {
                parentCount: @Model.ReportStatusStats.ParentCount,
				passParent: @Model.ReportStatusStats.ParentCountPass,
				failParent: @Model.ReportStatusStats.ParentCountFail,
				fatalParent: @Model.ReportStatusStats.ParentCountFatal,
				errorParent: @Model.ReportStatusStats.ParentCountError,
				warningParent: @Model.ReportStatusStats.ParentCountWarning,
				skipParent: @Model.ReportStatusStats.ParentCountSkip,
				exceptionsParent: @Model.ReportStatusStats.ParentCountExceptions,
				childCount: @Model.ReportStatusStats.ChildCount,
				passChild: @Model.ReportStatusStats.ChildCountPass,
				failChild: @Model.ReportStatusStats.ChildCountFail,
				fatalChild: @Model.ReportStatusStats.ChildCountFatal,
				errorChild: @Model.ReportStatusStats.ChildCountError,
				warningChild: @Model.ReportStatusStats.ChildCountWarning,
				skipChild: @Model.ReportStatusStats.ChildCountSkip,
				infoChild: @Model.ReportStatusStats.ChildCountInfo,
				debugChild: @Model.ReportStatusStats.ChildCountDebug,
				exceptionsChild: @Model.ReportStatusStats.ChildCountExceptions,
				grandChildCount: @Model.ReportStatusStats.GrandChildCount,
				passGrandChild: @Model.ReportStatusStats.GrandChildCountPass,
				failGrandChild: @Model.ReportStatusStats.GrandChildCountFail,
				fatalGrandChild: @Model.ReportStatusStats.GrandChildCountFatal,
				errorGrandChild: @Model.ReportStatusStats.GrandChildCountError,
				warningGrandChild: @Model.ReportStatusStats.GrandChildCountWarning,
				skipGrandChild: @Model.ReportStatusStats.GrandChildCountSkip,
				infoGrandChild: @Model.ReportStatusStats.GrandChildCountInfo,
				debugGrandChild: @Model.ReportStatusStats.GrandChildCountDebug,
				exceptionsGrandChild: @Model.ReportStatusStats.GrandChildCountExceptions,
			};
		</script>
		@if (Model.MasterConfig.GetValue("enableTimeline") == "true")
		{
				var json = "";
				for (int ix = 0; ix < Model.TestList.Count; ix++) {
					json += "\"" + Model.TestList[ix].Name + "\"" + ":" + Model.TestList[ix].RunDuration.TotalSeconds;
					if (ix != Model.TestList.Count-1) {
						json += ",";
					}
				}
			<script>
				var timeline = { @json };
			</script>
		}
		@Include("Scripts")
		<script>
			/* -- [ chart options ] -- */
			var options = {
			  responsive: true,
			  maintainAspectRatio: false,
			  legend: {
				  position: "right",
				  labels: {
					  boxWidth: 10,
					  fontSize: 11,
					  lineHeight: 1,
					  fontFamily: "Source Sans Pro",
					  padding: 1
				  }
			  },
			  cutoutPercentage: 65
			};

			function drawChart(ctx, config) {
				ctx.width = 100;
				ctx.height = 80;
				new Chart(ctx, config);
			}

			/* -- [ parent chart ] -- */
			(function drawParentChart() {
				if (typeof statusGroup !== "undefined") {
					var config = {
						type: 'doughnut',
							data: {
								datasets: [{
									borderColor: 'transparent',
									data: [
										statusGroup.passParent, statusGroup.failParent, statusGroup.fatalParent, statusGroup.errorParent, statusGroup.warningParent, statusGroup.skipParent
									],
									backgroundColor: [
										"#00af00", "#F7464A", "#8b0000", "#ff6347", "#FDB45C", "#1e90ff"
									]
								}],
								labels: [ "Pass", "Fail", "Fatal", "Error", "Warning", "Skip" ]
							},
							options: options
						};

						var ctx = document.getElementById("parent-analysis").getContext('2d');
						drawChart(ctx, config);
				}
			})();

			/* -- [ children chart ] -- */
			(function drawChildChart() {
				if (typeof statusGroup !== "undefined" && statusGroup.childCount > 0) {
					var config = {
						type: 'doughnut',
						data: {
							datasets: [{
								borderColor: 'transparent',
								data: [
									statusGroup.passChild, statusGroup.failChild, statusGroup.fatalChild, statusGroup.errorChild, statusGroup.warningChild, statusGroup.skipChild,statusGroup.infoChild
								],
								backgroundColor: [
									"#00af00", "#F7464A", "#8b0000", "#ff6347", "#FDB45C", "#1e90ff", "#46BFBD"
								]
							}],
							labels: [ "Pass", "Fail", "Fatal", "Error", "Warning", "Skip", "Info" ]
						},
						options: options
					};

					var ctx = document.getElementById("child-analysis").getContext('2d');
					drawChart(ctx, config);
				}
			})();

			/* -- [ grand-children chart ] -- */
			(function drawGrandChildChart() {
				if ($('#grandchild-analysis').length > 0 && typeof statusGroup !== "undefined" && statusGroup.grandChildCount > 0) {
					var config = {
						type: 'doughnut',
						data: {
							datasets: [{
								borderColor: 'transparent',
								data: [
									statusGroup.passGrandChild, statusGroup.failGrandChild, statusGroup.fatalGrandChild, statusGroup.errorGrandChild, statusGroup.warningGrandChild, statusGroup.skipGrandChild, statusGroup.infoGrandChild
								],
								backgroundColor: [
									"#00af00", "#F7464A", "#8b0000", "#ff6347", "#FDB45C", "#1e90ff", "#46BFBD"
								]
							}],
							labels: [ "Pass", "Fail", "Fatal", "Error", "Warning", "Skip", "Info" ]
						},
						options: options
					};

					var ctx = document.getElementById("grandchild-analysis").getContext('2d');
					drawChart(ctx, config);
				}
			})();

			/* -- [ timeline ] -- */
			function getRandomColor() {
				var letters = '0123456789ABCDEF';
				var color = '#';
				for (var i = 0; i < 6; i++) {
				color += letters[Math.floor(Math.random() * 16)];
				}
				return color;
			}

			(function drawTimelineChart() {
				if (typeof timeline !== "undefined") {
					var datasets = [];
					for (var key in timeline) {
						datasets.push({ label:key, data:[timeline[key]], backgroundColor: getRandomColor(), borderWidth: 1 });
					}
					var ctx = document.getElementById('timeline').getContext('2d');

					new Chart(ctx, {
						type: 'horizontalBar',
						data: {
							datasets: datasets
						},
						options: {
							responsive: true,
							maintainAspectRatio: false,
							tooltips: {
								mode: 'point'
							},
							scales: {
								xAxes: [{
									stacked: true,
									gridLines: false
								}],
								yAxes: [{
									stacked: true,
									gridLines: false,
									barThickness: 25
								}]
							},
							legend: {
								display: false
							}
						}
					});
				}
			})();
		</script>
	</body>
</html>